#!/usr/bin/env node

const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

var chalk = require('chalk');
const WEB = require('./package/web');
const DEPLOY_WEB = require('./deploy/web');
const LIB = require('./package/lib');
const SERVICE = require('./package/service');

const PackageJSON = require('../package.json');
const GENERATE_VERSION = require('./generate-version');

function PrintHeader() {
  console.log(
    `${chalk.whiteBright(PackageJSON.name.toLocaleUpperCase())} ${chalk.gray(PackageJSON.version)} `,
  );
  console.log(chalk.white(PackageJSON.description));
}

yargs(hideBin(process.argv))
  .command(
    ['package <type>'],
    'Package commannd to test, build and package an artifact.',
    (yargs) => {
      return yargs
        .option('h', {
          alias: 'host',
          describe: 'Base domain for this build. Defaults to numeropay.com',
        })
        .option('p', {
          alias: 'package-path',
          describe: 'Build directory relative to current directory.',
        })
        .option('debug', {
          describe: 'Enable debugging',
        });
    },
    (argv) => {
      if (argv.debug) {
        process.DEBUG = true;
      }
      PrintHeader();
      switch (argv.type) {
        case 'lib':
          console.log(`Packaging ${chalk.yellow('Library')}`);
          LIB(argv);
          break;
        case 'web':
          console.log(`Packaging ${chalk.yellow('Website')}`);
          WEB(argv);
          break;
        case 'service':
          console.log(`Packaging ${chalk.yellow('Service')}`);
          SERVICE(argv);
          break;

        default:
          console.log(chalk.red(`Invalid package type "${argv.type}"`));
          break;
      }
    },
  )
  .command(
    ['deploy <type>'],
    'Deploy a relese to an environment',
    (yargs) => {
      return yargs
        .option('e', {
          alias: 'environment',
          default: 'production',
          describe: 'Deployment environment',
        })
        .option('r', {
          alias: 'release',
          demandOption: true,
          describe: 'Release version. \nE.g.: 1.1.0',
        })
        .option('debug', {
          describe: 'Enable debugging',
        })
        .option('dry-run', {
          describe: 'Dry run deploy script. No write actions are performed.',
        });
    },
    (argv) => {
      if (argv.debug) {
        process.DEBUG = true;
      }
      PrintHeader();
      switch (argv.type) {
        case 'lib':
          // LIB(argv);
          break;
        case 'web':
          console.log(
            `Deploying ${chalk.yellow('Website')}\n${chalk.whiteBright(argv.release)} to ${chalk.whiteBright(argv.environment)}`,
          );
          DEPLOY_WEB(argv);
          break;
        case 'service':
          // SERVICE(argv);
          break;

        default:
          console.log(chalk.red(`Invalid package type "${argv.type}"`));
          break;
      }
      // console.log('Deploy', argv.type, 'type');
    },
  )
  .command(
    ['generate-config'],
    'Generates version.json for passed environment',
    (yargs) => {
      return yargs
        .option('e', {
          alias: 'environment',
          default: 'production',
          describe: 'Deployment environment',
        })
        .option('debug', {
          describe: 'Enable debugging',
        });
    },
    (argv) => {
      if (argv.debug) {
        process.DEBUG = true;
        PrintHeader();
      }
      GENERATE_VERSION(argv);
    },
  )
  .command(
    ['init-repo <type>'],
    'Intialise pipeline of app type',
    {},
    (argv) => {
      console.log('init-repo', argv.type, 'type');
    },
  )
  .demandCommand().argv;
// console.log(process.cwd());

// args.help();
